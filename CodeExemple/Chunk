using UnityEngine;
using System.Collections;

[RequireComponent(typeof(MeshFilter))]
[RequireComponent(typeof(MeshRenderer))]
[RequireComponent(typeof(MeshCollider))]

public class Chunk : MonoBehaviour {

	private Block[,,] blocks = new Block[chunkSizeXZ, chunkSizeY, chunkSizeXZ];
	public static int chunkSizeXZ = 32;
	public static int chunkSizeY = 16;
	public bool update = true;

	public World world;
	public WorldPos pos;

	MeshFilter filter;
	MeshCollider coll;

	// Use this for initialization
	void Start () 
	{
		filter = gameObject.GetComponent<MeshFilter> ();
		coll = gameObject.GetComponent<MeshCollider> ();
	}
	

	void Update()
	{
		if(update)
		{
			update = false;
			UpdateChunk();
		}
	}

	public Block GetBlock(int x, int y, int z)
	{
		if(InRangeXZ(x) && InRangeY(y) && InRangeXZ(z))
		{
			return blocks[x, y, z];
		}

		return world.GetBlock (pos.x + x, pos.y + y, pos.z + z);
	}

	public void SetBlock(int x, int y, int z, Block block)
	{
		if(InRangeXZ(x) && InRangeY(y) && InRangeXZ(z))
		{
			blocks[x, y, z] = block;
		}
		else
		{
			world.SetBlock(pos.x + x, pos.y + y, pos.z + z, block);
		}
	}

	public static bool InRangeXZ(int index)
	{
		if (index < 0 || index >= chunkSizeXZ)
		{
			return false;
		}

		return true;
	}
	
	public static bool InRangeY(int index)
	{
		if (index < 0 || index >= chunkSizeY)
		{
			return false;
		}
		
		return true;
	}

	void UpdateChunk()
	{
		MeshData meshData = new MeshData ();

		for(int x = 0; x < chunkSizeXZ; x++)
		{
			for (int y = 0; y < chunkSizeY; y++)
			{
				for (int z = 0; z < chunkSizeXZ; z++)
				{
					meshData = blocks[x, y, z].BlockData(this, x, y, z, meshData);
				}
			}
		}

		RenderMesh (meshData);
	}

	void RenderMesh(MeshData meshData)
	{
		filter.mesh.Clear ();
		filter.mesh.vertices = meshData.vertices.ToArray ();
		filter.mesh.triangles = meshData.triangles.ToArray ();
		filter.mesh.uv = meshData.uv.ToArray ();

		filter.mesh.RecalculateNormals ();

		coll.sharedMesh = null;
		Mesh mesh = new Mesh ();
		mesh.vertices = meshData.colVertices.ToArray ();
		mesh.triangles = meshData.colTriangles.ToArray ();
		mesh.RecalculateNormals ();

		coll.sharedMesh = mesh;
	}
}
